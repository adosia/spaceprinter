
// Code generated by @open-rpc/generator DO NOT EDIT.
import { RequestManager, PostMessageWindowTransport, PostMessageIframeTransport, WebSocketTransport, HTTPTransport, Client, JSONRPCError } from "@open-rpc/client-js";
import _ from "lodash";
import { OpenrpcDocument as OpenRPC, MethodObject, ContentDescriptorObject } from "@open-rpc/meta-schema";
import { MethodCallValidator, MethodNotFoundError } from "@open-rpc/schema-utils-js";

export type UserName = string;
export type Password = string;
export type JwToken = string;
export type RestEndpointType = string;
export type RestEndpoint = string;
export interface RestEndpointData { [key: string]: any; }
export type WalletName = string;
export type SeedPhrase = string;
export type WalletPassPhrase = string;
export type XpubKey = string;
export type WalletType = "general" | "printer";
export type WalletID = string;
export type AccountName = string;
export type AddressName = string;
export type Utxos = string;
export type Assets = string;
export type Metadata = string;
export type OutputAddress = string;
export type OutputValue = string;
export type ChangeAddress = string;
export type TxTTL = number;
export type Configjson = string;
export type Gcode = string;
export type FileURL = string;
export type FileName = string;
export type UpdateType = "full" | "update" | "ui";
export type CardanoCliCmd = string;
export type NodeAction = string;
export type NodeNetwork = string;
export type StringDoaGddGA = string;
/**
 *
 * Generated! Represents an alias to any of the provided schemas
 *
 */
export type AnyOfUserNamePasswordUserNamePasswordJwTokenRestEndpointTypeRestEndpointRestEndpointDataJwTokenWalletNameSeedPhraseWalletPassPhraseXpubKeyJwTokenWalletNameSeedPhraseWalletPassPhraseWalletTypeJwTokenWalletIDAccountNameWalletPassPhraseJwTokenWalletIDJwTokenWalletIDAccountNameJwTokenWalletIDWalletPassPhraseAddressNameUtxosAssetsMetadataOutputAddressOutputValueChangeAddressTxTTLJwTokenConfigjsonJwTokenGcodeJwTokenFileURLFileNameJwTokenUpdateTypeJwTokenCardanoCliCmdJwTokenNodeActionNodeNetworkStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGA = UserName | Password | JwToken | RestEndpointType | RestEndpoint | RestEndpointData | WalletName | SeedPhrase | WalletPassPhrase | XpubKey | WalletType | WalletID | AccountName | AddressName | Utxos | Assets | Metadata | OutputAddress | OutputValue | ChangeAddress | TxTTL | Configjson | Gcode | FileURL | FileName | UpdateType | CardanoCliCmd | NodeAction | NodeNetwork | StringDoaGddGA;
export type InitDevice = () => Promise<StringDoaGddGA>;
export type CreateUser = (userName: UserName, password: Password) => Promise<StringDoaGddGA>;
export type LoginUser = (userName: UserName, password: Password) => Promise<StringDoaGddGA>;
export type ResetUser = () => Promise<StringDoaGddGA>;
export type CardanoWallet = (jwToken: JwToken, restEndpointType: RestEndpointType, restEndpoint: RestEndpoint, restEndpointData: RestEndpointData) => Promise<StringDoaGddGA>;
export type CreateCardanoWallet = (jwToken: JwToken, walletName: WalletName, seedPhrase: SeedPhrase, walletPassPhrase: WalletPassPhrase, xpubKey: XpubKey) => Promise<StringDoaGddGA>;
export type GenCBWallet = (jwToken: JwToken, walletName: WalletName, seedPhrase: SeedPhrase, walletPassPhrase: WalletPassPhrase, walletType: WalletType) => Promise<StringDoaGddGA>;
export type GenCBWalletAccount = (jwToken: JwToken, walletID: WalletID, accountName: AccountName, walletPassPhrase: WalletPassPhrase) => Promise<StringDoaGddGA>;
export type GetCBWallets = (jwToken: JwToken, walletID: WalletID) => Promise<StringDoaGddGA>;
export type DelCBWallet = (jwToken: JwToken, walletID: WalletID, accountName: AccountName) => Promise<StringDoaGddGA>;
export type GenGruntTX = (jwToken: JwToken, walletID: WalletID, walletPassPhrase: WalletPassPhrase, addressName: AddressName, utxos: Utxos, assets: Assets, metadata: Metadata, outputAddress: OutputAddress, outputValue: OutputValue, changeAddress: ChangeAddress, txTTL: TxTTL) => Promise<StringDoaGddGA>;
export type EditConfig = (jwToken: JwToken, configjson: Configjson) => Promise<StringDoaGddGA>;
export type SendCmdToPrinter = (jwToken: JwToken, gcode: Gcode) => Promise<StringDoaGddGA>;
export type DownloadFile = (jwToken: JwToken, fileURL: FileURL, fileName: FileName) => Promise<StringDoaGddGA>;
export type Update = (jwToken: JwToken, updateType: UpdateType) => Promise<StringDoaGddGA>;
export type CardanoCli = (jwToken: JwToken, cardanoCliCmd: CardanoCliCmd) => Promise<StringDoaGddGA>;
export type CardanoNode = (jwToken: JwToken, nodeAction: NodeAction, nodeNetwork: NodeNetwork) => Promise<StringDoaGddGA>;

export interface Options {
  transport: {
    type: "websocket" | "http" | "https" | "postmessagewindow" | "postmessageiframe";
    host: string;
    port: number;
    path?: string;
    protocol?: string;
  },
}

export class Spaceprinter {
  public rpc: Client;
  public static openrpcDocument: OpenRPC = {"openrpc":"1.2.6","info":{"title":"spaceprinter","version":"1.0.0","description":"Space Printer: dapp for raspberry to allow your 3D printer to access Adosia market place on cardano"},"methods":[{"name":"initDevice","description":"Checks devie config for nodes running an dserives running and enables them","params":[],"result":{"name":"initDeviceResult","description":"Returns Cardano and Printer Info","schema":{"type":"string"}}},{"name":"createUser","description":"Creates user for Cardano Box","params":[{"name":"userName","description":"Cardano Box Username","required":true,"schema":{"title":"userName","type":"string"}},{"name":"password","description":"Cardano Box user password","required":true,"schema":{"title":"password","type":"string"}}],"result":{"name":"createUserRes","description":"Returns query response","schema":{"type":"string"}}},{"name":"loginUser","description":"Logs user in and generate JWT token","params":[{"name":"userName","description":"Cardano Box Username","required":true,"schema":{"title":"userName","type":"string"}},{"name":"password","description":"Cardano Box user password","required":true,"schema":{"title":"password","type":"string"}}],"result":{"name":"loginUserRes","description":"Returns query response","schema":{"type":"string"}}},{"name":"resetUser","description":"This should be used as a last result when user forgets their password to Cardano Box.","params":[],"result":{"name":"resetUserRes","description":"Returns query response","schema":{"type":"string"}}},{"name":"cardanoWallet","description":"Consumes cardano wallet rest API params.","params":[{"name":"jwToken","description":"Token created on login","required":true,"schema":{"title":"jwToken","type":"string"}},{"name":"restEndpointType","description":"Ocotoprint REST type of callGET or POST","required":true,"schema":{"title":"restEndpointType","type":"string"}},{"name":"restEndpoint","description":"Ocotoprint REST API endpoint","required":true,"schema":{"title":"restEndpoint","type":"string"}},{"name":"restEndpointData","description":"Ocotoprint API endpoint data to pass for POST","required":true,"schema":{"title":"restEndpointData","type":"object"}}],"result":{"name":"cardanoWalletRes","description":"Returns query response","schema":{"type":"string"}}},{"name":"createCardanoWallet","description":"Creates seed phrase if one wasn't provided and generates wallet on device","params":[{"name":"jwToken","description":"Token created on login","required":true,"schema":{"title":"jwToken","type":"string"}},{"name":"walletName","description":"Unique User wallet name","required":true,"schema":{"title":"walletName","type":"string"}},{"name":"seedPhrase","description":"Seed Phrase used to recover address","required":true,"schema":{"title":"seedPhrase","type":"string"}},{"name":"walletPassPhrase","description":"Secret Passphrase for wallet to unlock for TXs","required":true,"schema":{"title":"walletPassPhrase","type":"string"}},{"name":"xpubKey","description":"An extended account public key","required":true,"schema":{"title":"xpubKey","type":"string"}}],"result":{"name":"createCardanoWalletResult","description":"Returns wallet info and seed phrase if one was generated","schema":{"type":"string"}}},{"name":"genCBWallet","description":"Creates cardanobox wallet","params":[{"name":"jwToken","description":"Token created on login","required":true,"schema":{"title":"jwToken","type":"string"}},{"name":"walletName","description":"Unique User wallet name","required":true,"schema":{"title":"walletName","type":"string"}},{"name":"seedPhrase","description":"Seed Phrase used to recover address","required":true,"schema":{"title":"seedPhrase","type":"string"}},{"name":"walletPassPhrase","description":"Secret Passphrase for wallet to unlock for TXs","required":true,"schema":{"title":"walletPassPhrase","type":"string"}},{"name":"walletType","description":"Type of wallet, space printer or gen cardano","required":true,"schema":{"title":"walletType","type":"string","enum":["general","printer"]}}],"result":{"name":"genCBWalletResult","description":"Returns wallet info and seed phrase if one was generated","schema":{"type":"string"}}},{"name":"genCBWalletAccount","description":"Creates a new account on same seed and creates a new address for it.","params":[{"name":"jwToken","description":"Token created on login","required":true,"schema":{"title":"jwToken","type":"string"}},{"name":"walletID","description":"Wallet ID","required":true,"schema":{"title":"walletID","type":"string"}},{"name":"accountName","description":"Name for wallet account","required":true,"schema":{"title":"accountName","type":"string"}},{"name":"walletPassPhrase","description":"Secret Passphrase for wallet to unlock for TXs","required":true,"schema":{"title":"walletPassPhrase","type":"string"}}],"result":{"name":"genCBWalletAccountResult","description":"Returns generated address","schema":{"type":"string"}}},{"name":"getCBWallets","description":"querries cardanobox db for wallets","params":[{"name":"jwToken","description":"Token created on login","required":true,"schema":{"title":"jwToken","type":"string"}},{"name":"walletID","description":"Wallet ID","required":true,"schema":{"title":"walletID","type":"string"}}],"result":{"name":"getCBWalletsResult","description":"Returns array of objects of wallet exits","schema":{"type":"string"}}},{"name":"delCBWallet","description":"Deletes cardano box wallet","params":[{"name":"jwToken","description":"Token created on login","required":true,"schema":{"title":"jwToken","type":"string"}},{"name":"walletID","description":"Wallet ID","required":true,"schema":{"title":"walletID","type":"string"}},{"name":"accountName","description":"Name for wallet account","required":true,"schema":{"title":"accountName","type":"string"}}],"result":{"name":"delCBWalletResult","description":"Returns status of deletion","schema":{"type":"string"}}},{"name":"genGruntTX","description":"","params":[{"name":"jwToken","description":"Token created on login","required":true,"schema":{"title":"jwToken","type":"string"}},{"name":"walletID","description":"Wallet ID","required":true,"schema":{"title":"walletID","type":"string"}},{"name":"walletPassPhrase","description":"Secret Passphrase for wallet to unlock for TXs","required":true,"schema":{"title":"walletPassPhrase","type":"string"}},{"name":"addressName","description":"Name for address","required":true,"schema":{"title":"addressName","type":"string"}},{"name":"utxos","description":"Stringified array of utxo objects [{ txix: string, txIndex: number, inputValue: string }]","required":true,"schema":{"title":"utxos","type":"string"}},{"name":"assets","description":"Stringified array of asset objects [{ policyID: string, assetName: string, assetAmount: string }] ","required":true,"schema":{"title":"assets","type":"string"}},{"name":"metadata","description":"Stringified array of metadata objects [{ label: string, metadata: stringified object }] ","required":true,"schema":{"title":"metadata","type":"string"}},{"name":"outputAddress","description":"usually address receiving asset or lovelace","required":true,"schema":{"title":"outputAddress","type":"string"}},{"name":"outputValue","description":"amount of asset or lovelace associated with outputAddress","required":true,"schema":{"title":"outputValue","type":"string"}},{"name":"changeAddress","description":"Address that will receive left over fee change","required":true,"schema":{"title":"changeAddress","type":"string"}},{"name":"txTTL","description":"Address that will receive left over fee change","required":true,"schema":{"title":"txTTL","type":"number"}}],"result":{"name":"genGruntTXResult","description":"Returns signed TX cbor and submits if elected to.","schema":{"type":"string"}}},{"name":"editConfig","description":"Edits dapp config","params":[{"name":"jwToken","description":"Token created on login","required":true,"schema":{"title":"jwToken","type":"string"}},{"name":"configjson","description":"json string of config","required":true,"schema":{"title":"configjson","type":"string"}}],"result":{"name":"editConfigResult","description":"returns config status","schema":{"type":"string"}}},{"name":"sendCmdToPrinter","description":"sends gcode command to connacted printer.","params":[{"name":"jwToken","description":"Token created on login","required":true,"schema":{"title":"jwToken","type":"string"}},{"name":"gcode","description":"name of file for saving or whatever else. ","required":true,"schema":{"title":"gcode","type":"string"}}],"result":{"name":"sendCmdToPrinterResult","description":"Returns printer response","schema":{"type":"string"}}},{"name":"downloadFile","description":"Downlaods 3D file to device for slicing and printing.","params":[{"name":"jwToken","description":"Token created on login","required":true,"schema":{"title":"jwToken","type":"string"}},{"name":"fileURL","description":"location of file to download","required":true,"schema":{"title":"fileURL","type":"string"}},{"name":"fileName","description":"name of file for saving or whatever else.","required":true,"schema":{"title":"fileName","type":"string"}}],"result":{"name":"downloadFileResult","description":"Returns download status","schema":{"type":"string"}}},{"name":"update","description":"Updates spaceprinter software.","params":[{"name":"jwToken","description":"Token created on login","required":true,"schema":{"title":"jwToken","type":"string"}},{"name":"updateType","description":"Update type: full, incremental.","required":true,"schema":{"title":"updateType","type":"string","enum":["full","update","ui"]}}],"result":{"name":"updateResult","description":"Returns update status","schema":{"type":"string"}}},{"name":"cardanoCli","description":"Updates spaceprinter software.","params":[{"name":"jwToken","description":"Token created on login","required":true,"schema":{"title":"jwToken","type":"string"}},{"name":"cardanoCliCmd","description":"commands to pass to cardano cli","required":true,"schema":{"title":"cardanoCliCmd","type":"string"}}],"result":{"name":"cardanoCliResult","description":"Returns update status","schema":{"type":"string"}}},{"name":"cardanoNode","description":"Start/stop cardano node mainnet or testnet","params":[{"name":"jwToken","description":"Token created on login","required":true,"schema":{"title":"jwToken","type":"string"}},{"name":"nodeAction","description":"Start or Stop cardano node","required":true,"schema":{"title":"nodeAction","type":"string"}},{"name":"nodeNetwork","description":"Start cardano node mainnet or testnet","required":true,"schema":{"title":"nodeNetwork","type":"string"}}],"result":{"name":"cardanoNodeResult","description":"Returns Cardano Node status","schema":{"type":"string"}}}],"components":{"contentDescriptors":{"userName":{"name":"userName","description":"Cardano Box Username","required":true,"schema":{"title":"userName","type":"string"}},"password":{"name":"password","description":"Cardano Box user password","required":true,"schema":{"title":"password","type":"string"}},"jwToken":{"name":"jwToken","description":"Token created on login","required":true,"schema":{"title":"jwToken","type":"string"}},"adaAddress":{"name":"adaAddress","description":"unique device ada Address","required":true,"schema":{"title":"adaAddress","type":"string"}},"seedSize":{"name":"seedSize","description":"9, 12, 15, 18, 21 or 24 words","required":true,"schema":{"title":"seedSize","type":"number","enum":[0,9,12,15,18,21,24]}},"seedPhrase":{"name":"seedPhrase","description":"Seed Phrase used to recover address","required":true,"schema":{"title":"seedPhrase","type":"string"}},"walletName":{"name":"walletName","description":"Unique User wallet name","required":true,"schema":{"title":"walletName","type":"string"}},"xpubKey":{"name":"xpubKey","description":"An extended account public key","required":true,"schema":{"title":"xpubKey","type":"string"}},"walletPassPhrase":{"name":"walletPassPhrase","description":"Secret Passphrase for wallet to unlock for TXs","required":true,"schema":{"title":"walletPassPhrase","type":"string"}},"walletType":{"name":"walletType","description":"Type of wallet, space printer or gen cardano","required":true,"schema":{"title":"walletType","type":"string","enum":["general","printer"]}},"walletID":{"name":"walletID","description":"Wallet ID","required":true,"schema":{"title":"walletID","type":"string"}},"addressType":{"name":"addressType","description":"Type of address being generated","required":true,"schema":{"title":"addressType","type":"string","enum":["base","enterprise","pointer","reward","byron"]}},"addressName":{"name":"addressName","description":"Name for address","required":true,"schema":{"title":"addressName","type":"string"}},"accountName":{"name":"accountName","description":"Name for wallet account","required":true,"schema":{"title":"accountName","type":"string"}},"restEndpointType":{"name":"restEndpointType","description":"Ocotoprint REST type of callGET or POST","required":true,"schema":{"title":"restEndpointType","type":"string"}},"restEndpoint":{"name":"restEndpoint","description":"Ocotoprint REST API endpoint","required":true,"schema":{"title":"restEndpoint","type":"string"}},"restEndpointData":{"name":"restEndpointData","description":"Ocotoprint API endpoint data to pass for POST","required":true,"schema":{"title":"restEndpointData","type":"object"}},"configjson":{"name":"configjson","description":"json string of config","required":true,"schema":{"title":"configjson","type":"string"}},"fileURL":{"name":"fileURL","description":"location of file to download","required":true,"schema":{"title":"fileURL","type":"string"}},"fileName":{"name":"fileName","description":"name of file for saving or whatever else.","required":true,"schema":{"title":"fileName","type":"string"}},"gcode":{"name":"gcode","description":"name of file for saving or whatever else. ","required":true,"schema":{"title":"gcode","type":"string"}},"updateType":{"name":"updateType","description":"Update type: full, incremental.","required":true,"schema":{"title":"updateType","type":"string","enum":["full","update","ui"]}},"cardanoCliCmd":{"name":"cardanoCliCmd","description":"commands to pass to cardano cli","required":true,"schema":{"title":"cardanoCliCmd","type":"string"}},"nodeAction":{"name":"nodeAction","description":"Start or Stop cardano node","required":true,"schema":{"title":"nodeAction","type":"string"}},"nodeNetwork":{"name":"nodeNetwork","description":"Start cardano node mainnet or testnet","required":true,"schema":{"title":"nodeNetwork","type":"string"}},"txix":{"name":"txix","description":"txix for TX input","required":true,"schema":{"title":"txix","type":"string"}},"txixIndex":{"name":"txixIndex","description":"txix index","required":true,"schema":{"title":"txixIndex","type":"number"}},"inputValue":{"name":"inputValue","description":"input value or amount if lovelace your subtracting for the input txix","required":true,"schema":{"title":"inputValue","type":"string"}},"outputAddress":{"name":"outputAddress","description":"usually address receiving asset or lovelace","required":true,"schema":{"title":"outputAddress","type":"string"}},"outputValue":{"name":"outputValue","description":"amount of asset or lovelace associated with outputAddress","required":true,"schema":{"title":"outputValue","type":"string"}},"changeAddress":{"name":"changeAddress","description":"Address that will receive left over fee change","required":true,"schema":{"title":"changeAddress","type":"string"}},"txTTL":{"name":"txTTL","description":"Address that will receive left over fee change","required":true,"schema":{"title":"txTTL","type":"number"}},"utxos":{"name":"utxos","description":"Stringified array of utxo objects [{ txix: string, txIndex: number, inputValue: string }]","required":true,"schema":{"title":"utxos","type":"string"}},"assets":{"name":"assets","description":"Stringified array of asset objects [{ policyID: string, assetName: string, assetAmount: string }] ","required":true,"schema":{"title":"assets","type":"string"}},"metadata":{"name":"metadata","description":"Stringified array of metadata objects [{ label: string, metadata: stringified object }] ","required":true,"schema":{"title":"metadata","type":"string"}}}}} ;
  public transport: HTTPTransport | WebSocketTransport | PostMessageWindowTransport | PostMessageIframeTransport;
  private validator: MethodCallValidator;
  private timeout: number | undefined;

  constructor(options: Options) {

    if (options.transport === undefined || options.transport.type === undefined) {
      throw new Error("Invalid constructor params");
    }
    const {type, host, port, protocol} = options.transport;
    let path = options.transport.path || "";
    if(path && path[0] !== "/") {
        path = "/" + path;
    }
    switch (type) {
      case 'http':
      case 'https':
        this.transport = new HTTPTransport((protocol || type) + "://" + host + ":" + port + path);
        break;
      case 'websocket':
        this.transport = new WebSocketTransport((protocol || "ws://") + host + ":" + port + path);
        break;
      case 'postmessageiframe':
        this.transport = new PostMessageIframeTransport(protocol + "://" + host + ":" + port + path);
        break;
      case 'postmessagewindow':
        this.transport = new PostMessageWindowTransport(protocol + "://" + host + ":" + port + path);
        break;
      default:
        throw new Error("unsupported transport");
        break;
    }
    this.rpc = new Client(new RequestManager([this.transport]));
    this.validator = new MethodCallValidator(Spaceprinter.openrpcDocument);
  }
  /**
   * Adds a JSONRPC notification handler to handle receiving notifications.
   * @example
   * myClient.onNotification((data)=>console.log(data));
   */
  public onNotification(callback: (data: any) => void) {
    this.rpc.onNotification(callback);
  }

  /**
   * Adds an optional JSONRPCError handler to handle receiving errors that cannot be resolved to a specific request
   * @example
   * myClient.onError((err: JSONRPCError)=>console.log(err.message));
   */
  public onError(callback: (data: JSONRPCError) => void) {
     this.rpc.onError(callback);
  }

  /**
   * Sets a default timeout in ms for all requests excluding notifications.
   * @example
   * // 20s timeout
   * myClient.setDefaultTimeout(20000);
   * // Removes timeout from request
   * myClient.setDefaultTimeout(undefined);
   */
   public setDefaultTimeout(ms?: number) {
    this.timeout = ms;
  }

  /**
   * Initiates [[Spaceprinter.startBatch]] in order to build a batch call.
   *
   * Subsequent calls to [[Spaceprinter.request]] will be added to the batch.
   * Once [[Spaceprinter.stopBatch]] is called, the promises for the [[Spaceprinter.request]]
   * will then be resolved.  If there is already a batch in progress this method is a noop.
   *
   * @example
   * myClient.startBatch();
   * myClient.foo().then(() => console.log("foobar"))
   * myClient.bar().then(() => console.log("foobarbaz"))
   * myClient.stopBatch();
   */
  public startBatch(): void {
    return this.rpc.startBatch();
  }

  /**
   * Initiates [[Client.stopBatch]] in order to finalize and send the batch to the underlying transport.
   *
   * stopBatch will send the [[Spaceprinter]] calls made since the last [[Spaceprinter.startBatch]] call. For
   * that reason, [[Spaceprinter.startBatch]] MUST be called before [[Spaceprinter.stopBatch]].
   *
   * @example
   * myClient.startBatch();
   * myClient.foo().then(() => console.log("foobar"))
   * myClient.bar().then(() => console.log("foobarbaz"))
   * myClient.stopBatch();
   */
  public stopBatch(): void {
    return this.rpc.stopBatch();
  }

  private request(methodName: string, params: any[]): Promise<any> {
    const methodObject = _.find((Spaceprinter.openrpcDocument.methods as MethodObject[]), ({name}) => name === methodName) as MethodObject;
    const notification = methodObject.result ? false : true;
    const openRpcMethodValidationErrors = this.validator.validate(methodName, params);
    if ( openRpcMethodValidationErrors instanceof MethodNotFoundError || openRpcMethodValidationErrors.length > 0) {
      return Promise.reject(openRpcMethodValidationErrors);
    }

    let rpcParams;
    if (methodObject.paramStructure && methodObject.paramStructure === "by-name") {
      rpcParams = _.zipObject(_.map(methodObject.params, "name"), params);
    } else {
      rpcParams = params;
    }
    if (notification) {
      return this.rpc.notify({method: methodName, params: rpcParams});
    }
    return this.rpc.request({method: methodName, params: rpcParams}, this.timeout);
  }

  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public initDevice: InitDevice = (...params) => {
    return this.request("initDevice", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public createUser: CreateUser = (...params) => {
    return this.request("createUser", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public loginUser: LoginUser = (...params) => {
    return this.request("loginUser", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public resetUser: ResetUser = (...params) => {
    return this.request("resetUser", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public cardanoWallet: CardanoWallet = (...params) => {
    return this.request("cardanoWallet", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public createCardanoWallet: CreateCardanoWallet = (...params) => {
    return this.request("createCardanoWallet", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public genCBWallet: GenCBWallet = (...params) => {
    return this.request("genCBWallet", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public genCBWalletAccount: GenCBWalletAccount = (...params) => {
    return this.request("genCBWalletAccount", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public getCBWallets: GetCBWallets = (...params) => {
    return this.request("getCBWallets", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public delCBWallet: DelCBWallet = (...params) => {
    return this.request("delCBWallet", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public genGruntTX: GenGruntTX = (...params) => {
    return this.request("genGruntTX", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public editConfig: EditConfig = (...params) => {
    return this.request("editConfig", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public sendCmdToPrinter: SendCmdToPrinter = (...params) => {
    return this.request("sendCmdToPrinter", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public downloadFile: DownloadFile = (...params) => {
    return this.request("downloadFile", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public update: Update = (...params) => {
    return this.request("update", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public cardanoCli: CardanoCli = (...params) => {
    return this.request("cardanoCli", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public cardanoNode: CardanoNode = (...params) => {
    return this.request("cardanoNode", params);
  }
  
}
export default Spaceprinter;
