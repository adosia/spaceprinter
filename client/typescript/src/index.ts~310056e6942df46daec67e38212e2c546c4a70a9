
// Code generated by @open-rpc/generator DO NOT EDIT.
import { RequestManager, PostMessageWindowTransport, PostMessageIframeTransport, WebSocketTransport, HTTPTransport, Client, JSONRPCError } from "@open-rpc/client-js";
import _ from "lodash";
import { OpenrpcDocument as OpenRPC, MethodObject, ContentDescriptorObject } from "@open-rpc/meta-schema";
import { MethodCallValidator, MethodNotFoundError } from "@open-rpc/schema-utils-js";

export type RestEndpointType = string;
export type RestEndpoint = string;
export interface RestEndpointData { [key: string]: any; }
export type WalletName = string;
export type SeedPhrase = string;
export type WalletPassPhrase = string;
export type XpubKey = string;
export type WalletID = string;
export type Configjson = string;
export type Gcode = string;
export type FileURL = string;
export type FileName = string;
export type UpdateType = string;
export type CardanoCliCmd = string;
export type NodeAction = string;
export type NodeNetwork = string;
export type StringDoaGddGA = string;
/**
 *
 * Generated! Represents an alias to any of the provided schemas
 *
 */
export type AnyOfRestEndpointTypeRestEndpointRestEndpointDataWalletNameSeedPhraseWalletPassPhraseXpubKeyWalletIDConfigjsonGcodeFileURLFileNameUpdateTypeCardanoCliCmdNodeActionNodeNetworkStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGAStringDoaGddGA = RestEndpointType | RestEndpoint | RestEndpointData | WalletName | SeedPhrase | WalletPassPhrase | XpubKey | WalletID | Configjson | Gcode | FileURL | FileName | UpdateType | CardanoCliCmd | NodeAction | NodeNetwork | StringDoaGddGA;
export type InitDevice = () => Promise<StringDoaGddGA>;
export type CardanoWallet = (restEndpointType: RestEndpointType, restEndpoint: RestEndpoint, restEndpointData: RestEndpointData) => Promise<StringDoaGddGA>;
export type CreateCardanoWallet = (walletName: WalletName, seedPhrase: SeedPhrase, walletPassPhrase: WalletPassPhrase, xpubKey: XpubKey) => Promise<StringDoaGddGA>;
export type StartWalletWatch = (walletID: WalletID) => Promise<StringDoaGddGA>;
export type StopWalletWatch = () => Promise<StringDoaGddGA>;
export type EditConfig = (configjson: Configjson) => Promise<StringDoaGddGA>;
export type SendCmdToPrinter = (gcode: Gcode) => Promise<StringDoaGddGA>;
export type DownloadFile = (fileURL: FileURL, fileName: FileName) => Promise<StringDoaGddGA>;
export type Update = (updateType: UpdateType) => Promise<StringDoaGddGA>;
export type CardanoCli = (cardanoCliCmd: CardanoCliCmd) => Promise<StringDoaGddGA>;
export type CardanoNode = (nodeAction: NodeAction, nodeNetwork: NodeNetwork) => Promise<StringDoaGddGA>;

export interface Options {
  transport: {
    type: "websocket" | "http" | "https" | "postmessagewindow" | "postmessageiframe";
    host: string;
    port: number;
    path?: string;
    protocol?: string;
  },
}

export class Cardanobox {
  public rpc: Client;
  public static openrpcDocument: OpenRPC = {"openrpc":"1.2.6","info":{"title":"cardanobox","version":"1.0.0","description":"Cardano Box: run your own nodes and dapps locally"},"methods":[{"name":"initDevice","description":"Checks if any nodes need to be ran and updates wallets if any exist","params":[],"result":{"name":"initDeviceResult","description":"Returns Cardano and Printer Info","schema":{"type":"string"}}},{"name":"cardanoWallet","description":"Consumes cardano wallet rest API params.","params":[{"name":"restEndpointType","description":"Ocotoprint REST type of callGET or POST","required":true,"schema":{"title":"restEndpointType","type":"string"}},{"name":"restEndpoint","description":"Ocotoprint REST API endpoint","required":true,"schema":{"title":"restEndpoint","type":"string"}},{"name":"restEndpointData","description":"Ocotoprint API endpoint data to pass for POST","required":true,"schema":{"title":"restEndpointData","type":"object"}}],"result":{"name":"cardanoWallet","description":"Returns query response","schema":{"type":"string"}}},{"name":"createCardanoWallet","description":"Creates seed phrase if one wasn't provided and generates wallet on device","params":[{"name":"walletName","description":"Unique User wallet name","required":true,"schema":{"title":"walletName","type":"string"}},{"name":"seedPhrase","description":"Seed Phrase used to recover address","required":true,"schema":{"title":"seedPhrase","type":"string"}},{"name":"walletPassPhrase","description":"Secret Passphrase for wallet to unlock for TXs","required":true,"schema":{"title":"walletPassPhrase","type":"string"}},{"name":"xpubKey","description":"An extended account public key","required":true,"schema":{"title":"xpubKey","type":"string"}}],"result":{"name":"createCardanoWalletResult","description":"Returns wallet info and seed phrase if one was generated","schema":{"type":"string"}}},{"name":"startWalletWatch","description":"watches selected wallet for new TXs","params":[{"name":"walletID","description":"Wallet ID","required":true,"schema":{"title":"walletID","type":"string"}}],"result":{"name":"startWatchWalletResult","description":"Stop watching wallet for new TXs","schema":{"type":"string"}}},{"name":"stopWalletWatch","description":"Stops watching wallet for new TXs","params":[],"result":{"name":"stopWalletWatchResult","description":"Stops watching wallet for new TXs","schema":{"type":"string"}}},{"name":"editConfig","description":"Edits dapp config","params":[{"name":"configjson","description":"json string of config","required":true,"schema":{"title":"configjson","type":"string"}}],"result":{"name":"editConfigResult","description":"returns config status","schema":{"type":"string"}}},{"name":"sendCmdToPrinter","description":"sends gcode command to connacted printer.","params":[{"name":"gcode","description":"name of file for saving or whatever else. ","required":true,"schema":{"title":"gcode","type":"string"}}],"result":{"name":"sendCmdToPrinterResult","description":"Returns printer response","schema":{"type":"string"}}},{"name":"downloadFile","description":"Downlaods 3D file to device for slicing and printing.","params":[{"name":"fileURL","description":"location of file to download","required":true,"schema":{"title":"fileURL","type":"string"}},{"name":"fileName","description":"name of file for saving or whatever else.","required":true,"schema":{"title":"fileName","type":"string"}}],"result":{"name":"downloadFileResult","description":"Returns download status","schema":{"type":"string"}}},{"name":"update","description":"Updates spaceprinter software.","params":[{"name":"updateType","description":"Update type: full, incremental.","required":true,"schema":{"title":"updateType","type":"string"}}],"result":{"name":"updateResult","description":"Returns update status","schema":{"type":"string"}}},{"name":"cardanoCli","description":"Updates spaceprinter software.","params":[{"name":"cardanoCliCmd","description":"commands to pass to cardano cli","required":true,"schema":{"title":"cardanoCliCmd","type":"string"}}],"result":{"name":"cardanoCliResult","description":"Returns update status","schema":{"type":"string"}}},{"name":"cardanoNode","description":"Start/stop cardano node mainnet or testnet","params":[{"name":"nodeAction","description":"Start or Stop cardano node","required":true,"schema":{"title":"nodeAction","type":"string"}},{"name":"nodeNetwork","description":"Start cardano node mainnet or testnet","required":true,"schema":{"title":"nodeNetwork","type":"string"}}],"result":{"name":"cardanoNodeResult","description":"Returns Cardano Node status","schema":{"type":"string"}}}],"components":{"contentDescriptors":{"adaAddress":{"name":"adaAddress","description":"unique device ada Address","required":true,"schema":{"title":"adaAddress","type":"string"}},"seedSize":{"name":"seedSize","description":"9, 12, 15, 18, 21 or 24 words","required":true,"schema":{"title":"seedSize","type":"number","enum":[0,9,12,15,18,21,24]}},"seedPhrase":{"name":"seedPhrase","description":"Seed Phrase used to recover address","required":true,"schema":{"title":"seedPhrase","type":"string"}},"walletName":{"name":"walletName","description":"Unique User wallet name","required":true,"schema":{"title":"walletName","type":"string"}},"xpubKey":{"name":"xpubKey","description":"An extended account public key","required":true,"schema":{"title":"xpubKey","type":"string"}},"walletPassPhrase":{"name":"walletPassPhrase","description":"Secret Passphrase for wallet to unlock for TXs","required":true,"schema":{"title":"walletPassPhrase","type":"string"}},"walletID":{"name":"walletID","description":"Wallet ID","required":true,"schema":{"title":"walletID","type":"string"}},"restEndpointType":{"name":"restEndpointType","description":"Ocotoprint REST type of callGET or POST","required":true,"schema":{"title":"restEndpointType","type":"string"}},"restEndpoint":{"name":"restEndpoint","description":"Ocotoprint REST API endpoint","required":true,"schema":{"title":"restEndpoint","type":"string"}},"restEndpointData":{"name":"restEndpointData","description":"Ocotoprint API endpoint data to pass for POST","required":true,"schema":{"title":"restEndpointData","type":"object"}},"configjson":{"name":"configjson","description":"json string of config","required":true,"schema":{"title":"configjson","type":"string"}},"fileURL":{"name":"fileURL","description":"location of file to download","required":true,"schema":{"title":"fileURL","type":"string"}},"fileName":{"name":"fileName","description":"name of file for saving or whatever else.","required":true,"schema":{"title":"fileName","type":"string"}},"gcode":{"name":"gcode","description":"name of file for saving or whatever else. ","required":true,"schema":{"title":"gcode","type":"string"}},"updateType":{"name":"updateType","description":"Update type: full, incremental.","required":true,"schema":{"title":"updateType","type":"string"}},"cardanoCliCmd":{"name":"cardanoCliCmd","description":"commands to pass to cardano cli","required":true,"schema":{"title":"cardanoCliCmd","type":"string"}},"nodeAction":{"name":"nodeAction","description":"Start or Stop cardano node","required":true,"schema":{"title":"nodeAction","type":"string"}},"nodeNetwork":{"name":"nodeNetwork","description":"Start cardano node mainnet or testnet","required":true,"schema":{"title":"nodeNetwork","type":"string"}}}}} ;
  public transport: HTTPTransport | WebSocketTransport | PostMessageWindowTransport | PostMessageIframeTransport;
  private validator: MethodCallValidator;
  private timeout: number | undefined;

  constructor(options: Options) {

    if (options.transport === undefined || options.transport.type === undefined) {
      throw new Error("Invalid constructor params");
    }
    const {type, host, port, protocol} = options.transport;
    let path = options.transport.path || "";
    if(path && path[0] !== "/") {
        path = "/" + path;
    }
    switch (type) {
      case 'http':
      case 'https':
        this.transport = new HTTPTransport((protocol || type) + "://" + host + ":" + port + path);
        break;
      case 'websocket':
        this.transport = new WebSocketTransport((protocol || "ws://") + host + ":" + port + path);
        break;
      case 'postmessageiframe':
        this.transport = new PostMessageIframeTransport(protocol + "://" + host + ":" + port + path);
        break;
      case 'postmessagewindow':
        this.transport = new PostMessageWindowTransport(protocol + "://" + host + ":" + port + path);
        break;
      default:
        throw new Error("unsupported transport");
        break;
    }
    this.rpc = new Client(new RequestManager([this.transport]));
    this.validator = new MethodCallValidator(Cardanobox.openrpcDocument);
  }
  /**
   * Adds a JSONRPC notification handler to handle receiving notifications.
   * @example
   * myClient.onNotification((data)=>console.log(data));
   */
  public onNotification(callback: (data: any) => void) {
    this.rpc.onNotification(callback);
  }

  /**
   * Adds an optional JSONRPCError handler to handle receiving errors that cannot be resolved to a specific request
   * @example
   * myClient.onError((err: JSONRPCError)=>console.log(err.message));
   */
  public onError(callback: (data: JSONRPCError) => void) {
     this.rpc.onError(callback);
  }

  /**
   * Sets a default timeout in ms for all requests excluding notifications.
   * @example
   * // 20s timeout
   * myClient.setDefaultTimeout(20000);
   * // Removes timeout from request
   * myClient.setDefaultTimeout(undefined);
   */
   public setDefaultTimeout(ms?: number) {
    this.timeout = ms;
  }

  /**
   * Initiates [[Cardanobox.startBatch]] in order to build a batch call.
   *
   * Subsequent calls to [[Cardanobox.request]] will be added to the batch.
   * Once [[Cardanobox.stopBatch]] is called, the promises for the [[Cardanobox.request]]
   * will then be resolved.  If there is already a batch in progress this method is a noop.
   *
   * @example
   * myClient.startBatch();
   * myClient.foo().then(() => console.log("foobar"))
   * myClient.bar().then(() => console.log("foobarbaz"))
   * myClient.stopBatch();
   */
  public startBatch(): void {
    return this.rpc.startBatch();
  }

  /**
   * Initiates [[Client.stopBatch]] in order to finalize and send the batch to the underlying transport.
   *
   * stopBatch will send the [[Cardanobox]] calls made since the last [[Cardanobox.startBatch]] call. For
   * that reason, [[Cardanobox.startBatch]] MUST be called before [[Cardanobox.stopBatch]].
   *
   * @example
   * myClient.startBatch();
   * myClient.foo().then(() => console.log("foobar"))
   * myClient.bar().then(() => console.log("foobarbaz"))
   * myClient.stopBatch();
   */
  public stopBatch(): void {
    return this.rpc.stopBatch();
  }

  private request(methodName: string, params: any[]): Promise<any> {
    const methodObject = _.find((Cardanobox.openrpcDocument.methods as MethodObject[]), ({name}) => name === methodName) as MethodObject;
    const notification = methodObject.result ? false : true;
    const openRpcMethodValidationErrors = this.validator.validate(methodName, params);
    if ( openRpcMethodValidationErrors instanceof MethodNotFoundError || openRpcMethodValidationErrors.length > 0) {
      return Promise.reject(openRpcMethodValidationErrors);
    }

    let rpcParams;
    if (methodObject.paramStructure && methodObject.paramStructure === "by-name") {
      rpcParams = _.zipObject(_.map(methodObject.params, "name"), params);
    } else {
      rpcParams = params;
    }
    if (notification) {
      return this.rpc.notify({method: methodName, params: rpcParams});
    }
    return this.rpc.request({method: methodName, params: rpcParams}, this.timeout);
  }

  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public initDevice: InitDevice = (...params) => {
    return this.request("initDevice", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public cardanoWallet: CardanoWallet = (...params) => {
    return this.request("cardanoWallet", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public createCardanoWallet: CreateCardanoWallet = (...params) => {
    return this.request("createCardanoWallet", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public startWalletWatch: StartWalletWatch = (...params) => {
    return this.request("startWalletWatch", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public stopWalletWatch: StopWalletWatch = (...params) => {
    return this.request("stopWalletWatch", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public editConfig: EditConfig = (...params) => {
    return this.request("editConfig", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public sendCmdToPrinter: SendCmdToPrinter = (...params) => {
    return this.request("sendCmdToPrinter", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public downloadFile: DownloadFile = (...params) => {
    return this.request("downloadFile", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public update: Update = (...params) => {
    return this.request("update", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public cardanoCli: CardanoCli = (...params) => {
    return this.request("cardanoCli", params);
  }
  
  /**
   * 
   */
  // tslint:disable-next-line:max-line-length
  public cardanoNode: CardanoNode = (...params) => {
    return this.request("cardanoNode", params);
  }
  
}
export default Cardanobox;
