import React, { useState, useEffect } from "react";
import { SpacePrinterAPI, CardanoBoxHttp } from "../../api/SpacePrinterApis";
import { Button, Dialog, DialogActions, DialogContent, DialogTitle, makeStyles, Theme, TextField  } from "@material-ui/core"; //tslint:disable-line
import { hex2a } from "../../utils/hextools";
import AppBar from '@material-ui/core/AppBar';
import Tabs from '@material-ui/core/Tabs';
import Tab from '@material-ui/core/Tab';
import Typography from '@material-ui/core/Typography';
import Box from '@material-ui/core/Box';
import BathtubIcon from '@material-ui/icons/Bathtub';
import { AccountAssetsTable } from './AccountAssetsTable';
import { AccountUTXOsTable } from "./AccountUTXOsTable";
import { parseOgmiosUtxos, ParseBlockfrostUtxos} from "./UTXOtools";
import { TxPreview } from "./TxPreview";

interface TabPanelProps {
  children?: React.ReactNode;
  index: any;
  value: any;
}

const TabPanel = (props: TabPanelProps) => {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`scrollable-force-tabpanel-${index}`}
      aria-labelledby={`scrollable-force-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box p={3}>
          <Typography>{children}</Typography>
        </Box>
      )}
    </div>
  );
}

function a11yProps(index: any) {
  return {
    id: `scrollable-force-tab-${index}`,
    'aria-controls': `scrollable-force-tabpanel-${index}`,
  };
}

type AccountTabsProps = {
  jwToken: string
  address: any,
  accountName: any,
  walletID: any
}

export const AccountTabs: React.FC< AccountTabsProps> = ({ jwToken, address, accountName, walletID }) => {
  const useStyles = makeStyles(( theme: Theme ) => ({
    root: {
      flexGrow: 1,
      width: '100%',
      backgroundColor: theme.palette.background.paper,
    },
  }));

  const classes = useStyles();
  const [value, setValue] = React.useState(0);
  const [ open, setOpen ] = useState( false );
  const [ parsedUtxos, setParsedUtxos ]:any = useState();
  const [ utxos, setUtxos ]: any = useState([]);
  const [ utxoCheck, setUtxocheck ]: any = useState({});
  const [ assetCheck, setAssetcheck ]: any = useState({});
  const [ outputs, setOutputs ]: any = useState([]);
  const [ outputAddress, setOutputAddress ]: any = useState("");
  const [ outputLovelace, setOutputlovelace ]: any = useState("");
  const [ walletPassword, setWalletPassword ] : any = useState("");
  const [ txTTL, setTxTTL ]: any = useState(91694786);

  const handleClickOpen = async () => {
    setUtxocheck({});
    setAssetcheck({});
    setUtxos([]);
    setOutputs([]);
    setOutputlovelace(0);
    setOutputAddress("");
    setParsedUtxos();
    setWalletPassword("");
    getAddressInfo();
    setOpen(true);
    // console.log(asset);   
    // getWalletAccounts();
  };

  const handleClose = () => {
    setOpen(false);
  };

  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {
    setValue(newValue);
  };

  const getAddressInfo = async () => {
    
    const praseUtxoRes: any = await parseOgmiosUtxos(address)
    const parseUtxoBFRes: any = await ParseBlockfrostUtxos(address);

    setTimeout( () => { 
      setParsedUtxos(parseUtxoBFRes);
    }, 3000) ;
    // console.log(praseUtxoRes);
    // const nftSearchRes: any = await CardanoBoxHttp.nftSearch( jwToken, "1", "1" );
    // console.log(nftSearchRes);
  };

  const updateLovelaceOutput = async () => {
    let exists = 0;
    await outputs.map(( output: any, key: any )=> {
      console.log(output)
      if (output.id == "lovelace" && output.outputAddress == outputAddress){
      outputs[key].outputValue = outputLovelace
      exists = 1
    }});
    exists == 0 && 
    setOutputs( [ ...outputs,
      {
        id: "lovelace",
        outputAddress: outputAddress,
        outputValue: outputLovelace,
        datums: [
                  {
                    "datumFieldsOuter":[
                        { "constructor": "0" },
                        // { "datumType": "byte", "datumValue": "a1c10c4767a63fe4983f1882d74d110652e9e7335d49db55f94e9841", "byteType": "hex" },
                        // { "datumType": "int", "datumValue": "12000000", "byteType": "" },
                    ]
                  },
                  {
                    "datumFieldsInner":[
                        { "constructor": "0" },
                        { "datumType": "byte", "datumValue": "a1c10c4767a63fe4983f1882d74d110652e9e7335d49db55f94e9841", "byteType": "hex" },
                        { "datumType": "int", "datumValue": "12000000", "byteType": "" },
                    ]
                  },
                ],
        redeemers:[
                    { "constructorOuter": "1" },
                    { "constructorInner": "0" },
                    { "redeemerType": "byte", "redeemerValue": "a1c10c4767a63fe4983f1882d74d110652e9e7335d49db55f94e9841", "byteType": "hex" },
                    { "redeemerType": "int",  "redeemerValue": "12000000", "byteType": "" },
                  ],
        plutus:[
                //  {
                //    "script": "591e18591e1501000033233223322332233223232333222323332223233333333222222223233322232333322223232332232333222323332223232332233223232333332222233223322332233223322332222323232323223232232325335303833300d3333573466e1cd55cea805a400046666644444666660b600a0080060040026eb4d5d0a8059bae35742a0146eb8d5d0a8049bad35742a0106eb4d5d09aba2500823504e35304f3357389210350543100050499263333573466e1cd55cea802a400046644660ac0040026eb4d5d0a8029bae357426ae8940148d4138d4c13ccd5ce24810350543100050499263333573466e1cd55cea8012400046602064646464646464646464646666ae68cdc39aab9d500a480008cccccccccc078cd40b08c8c8cccd5cd19b8735573aa0049000119812181f9aba150023031357426ae8940088d4178d4c17ccd5ce249035054310006049926135573ca00226ea8004d5d0a80519a8160169aba150093335503375ca0646ae854020ccd540cdd728191aba1500733502c04835742a00c66a05866aa0b20a2eb4d5d0a8029919191999ab9a3370e6aae754009200023350263232323333573466e1cd55cea80124000466a05c66a08eeb4d5d0a80118261aba135744a00446a0c46a60c666ae712401035054310006449926135573ca00226ea8004d5d0a8011919191999ab9a3370e6aae7540092000233502c33504775a6ae854008c130d5d09aba250022350623530633357389201035054310006449926135573ca00226ea8004d5d09aba2500223505e35305f3357389201035054310006049926135573ca00226ea8004d5d0a80219a8163ae35742a00666a05866aa0b2eb88004d5d0a801181f1aba135744a00446a0b46a60b666ae71241035054310005c49926135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135573ca00226ea8004d5d0a8011919191999ab9a3370ea00290031181198201aba135573ca00646666ae68cdc3a801240084604460946ae84d55cf280211999ab9a3370ea006900111811181a9aba135573ca00a46666ae68cdc3a802240004604a6eb8d5d09aab9e50062350553530563357389201035054310005749926499264984d55cea80089baa001357426ae8940088d4138d4c13ccd5ce249035054310005049926104f13504d35304e3357389201035054350004f4984d55cf280089baa001135573ca00226ea80044d5d1280089aba25001135744a00226aae7940044dd50009109198008018011000911111111109199999999980080580500480400380300280200180110009109198008018011000891091980080180109000891091980080180109000891091980080180109000909111180200290911118018029091111801002909111180080290008919118011bac001320013550382233335573e0024a01c466a01a60086ae84008c00cd5d100101991919191999ab9a3370e6aae75400d200023330073232323333573466e1cd55cea8012400046601a60626ae854008cd404c0b4d5d09aba250022350363530373357389201035054310003849926135573ca00226ea8004d5d0a801999aa805bae500a35742a00466a01eeb8d5d09aba25002235032353033335738921035054310003449926135744a00226aae7940044dd50009110919980080200180110009109198008018011000899aa800bae75a224464460046eac004c8004d540c888c8cccd55cf80112804919a80419aa81898031aab9d5002300535573ca00460086ae8800c0b84d5d08008891001091091198008020018900089119191999ab9a3370ea002900011a80418029aba135573ca00646666ae68cdc3a801240044a01046a0526a605466ae712401035054310002b499264984d55cea80089baa001121223002003112200112001232323333573466e1cd55cea8012400046600c600e6ae854008dd69aba135744a00446a0466a604866ae71241035054310002549926135573ca00226ea80048848cc00400c00880048c8cccd5cd19b8735573aa002900011bae357426aae7940088d407cd4c080cd5ce24810350543100021499261375400224464646666ae68cdc3a800a40084a00e46666ae68cdc3a8012400446a014600c6ae84d55cf280211999ab9a3370ea00690001280511a8111a981199ab9c490103505431000244992649926135573aa00226ea8004484888c00c0104488800844888004480048c8cccd5cd19b8750014800880188cccd5cd19b8750024800080188d4068d4c06ccd5ce249035054310001c499264984d55ce9baa0011220021220012001232323232323333573466e1d4005200c200b23333573466e1d4009200a200d23333573466e1d400d200823300b375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c46601a6eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc048c050d5d0a8049bae357426ae8940248cccd5cd19b875006480088c050c054d5d09aab9e500b23333573466e1d401d2000230133016357426aae7940308d407cd4c080cd5ce2481035054310002149926499264992649926135573aa00826aae79400c4d55cf280109aab9e500113754002424444444600e01044244444446600c012010424444444600a010244444440082444444400644244444446600401201044244444446600201201040024646464646666ae68cdc3a800a400446660106eb4d5d0a8021bad35742a0066eb4d5d09aba2500323333573466e1d400920002300a300b357426aae7940188d4040d4c044cd5ce2490350543100012499264984d55cea80189aba25001135573ca00226ea80048488c00800c888488ccc00401401000c80048c8c8cccd5cd19b875001480088c018dd71aba135573ca00646666ae68cdc3a80124000460106eb8d5d09aab9e500423500a35300b3357389201035054310000c499264984d55cea80089baa001212230020032122300100320011122232323333573466e1cd55cea80124000466aa016600c6ae854008c014d5d09aba25002235007353008335738921035054310000949926135573ca00226ea8004498480048004448848cc00400c0084480048848cc00400c00880048888848ccccc00401801401000c0088004448c8c00400488cc00cc008008004cc8c8ccc888c8c8c8cc88ccc888ccc888ccc888cc88cc88ccc888cc88cc88c8c8c8cc88c8c8cc88cc88c8c8c8c8c8c8cccc8888c8cc88c8c8c8c8c8c8c8cc88c8c8cc88c8c8c8c8c8c8cc88cccccccc88888888ccccc88888c8c8c8cccc8888cc88cc88cc88cc88cc88c8c8c888c8c88c8c88c8c8c8c8c8c8c8c8c8c8c8c94cd4c1f0ccd41ec1e9403d20001330164911b437573746f6d6572204a6f622052656d6f76616c204661696c6564003335503d3053120012333507c504500107f3502612233002335508101301849116496e636f727265637420546f6b656e2052657475726e00333048500450145003330023355081013018490110496e636f7272656374205369676e65720033017500e50143300233550810130184910f496e636f727265637420537461746500333507d07c303a01548000cc008cc061240116546f6f204d616e792053637269707420496e7075747300500500115335307c333507b07a500f480084cc0592411a437573746f6d6572204a6f6220557064617465204661696c6564003335503d3053120012333507c504500107f350261223300233550810130184910f496e636f727265637420537461746500333507d07c303a01548000cc008cd5420404c061240110496e636f7272656374205369676e65720033017500e501433002335508101301849114496e636f727265637420546f6b656e20436f6e740033047500c500333002335508101301849113496e636f7272656374204e657720537461746500333507d07c303a500648000cc008cd5420404c06124112496e636f727265637420437573746f6d657200333507d056303e5006501433002335508101301849010f496e636f7272656374205072696365003322333573466e200080042040420804c0f5401920809bee023300233018490116546f6f204d616e792053637269707420496e7075747300500500115335307c333507b07a500f480104cc059241185072696e746572204a6f62204f66666572204661696c6564003335503d3053120012333507c504500107f3502612233002335508101301849114496e636f727265637420546f6b656e20436f6e740033047500c500333002335508101301849100080013300233550810130184910f496e636f727265637420537461746500333507d07c303a01548000cc008cd5420404c061240113496e636f7272656374204e657720537461746500333507d07c303a500748008cc008cd5420404c06124112496e636f727265637420437573746f6d657200333507d056303e5007501433002335508101301849010f496e636f727265637420507269636500333507d07c303d5007303d01533002335508101301849111496e636f7272656374205072696e74657200333507d056303b50075010330023355081013018490114496e636f7272656374205072696e742054696d65003307b303c500748000cc008cd5420404c061240110496e636f7272656374205369676e65720033017500e5010330023301849116546f6f204d616e792053637269707420496e7075747300500500115335307c333507b07a500f480184cc059241174f6666657220416363657074616e6365204661696c6564003335503d3053120012333507c504500107f3502612233002335508101301849114496e636f727265637420546f6b656e20436f6e740033047500c50033300233550810130184910f496e636f727265637420537461746500333507d07c303a01548008cc008cd5420404c061240113496e636f7272656374204e657720537461746500333507d07c303a500848010cc008cd5420404c06124112496e636f727265637420437573746f6d657200333507d056303e5008501433002335508101301849010f496e636f727265637420507269636500333507d07c303d5008303d01533002335508101301849111496e636f7272656374205072696e74657200333507d056303b50085013330023355081013018490114496e636f7272656374205072696e742054696d6500333507d07c303c5008303c01533002335508101301849110496e636f7272656374205369676e65720033017500e5014330023301849116546f6f204d616e792053637269707420496e7075747300500500115335307c333507b07a500f480204cc059241134f666665722044656e69616c204661696c6564003335503d3053120012333507c504500107f3502612233002335508101301849114496e636f727265637420546f6b656e20436f6e740033047500c50033300233550810130184910f496e636f727265637420537461746500333507d07c303a01548008cc008cd5420404c061240113496e636f7272656374204e657720537461746500333507d07c303a500948000cc008cd5420404c06124112496e636f727265637420437573746f6d657200333507d056303e5009501433002335508101301849010f496e636f727265637420507269636500333507d07c303d5009303d01533002335508101301849110496e636f7272656374205369676e65720033017500e5014330023301849116546f6f204d616e792053637269707420496e7075747300500500115335307c333507b07a500f480284cc059241195072696e7465722043616e63656c6c696e67204661696c6564003335503d3053120012333507c504500107f3502612233002335508101301849114496e636f727265637420546f6b656e20436f6e740033047500c500333002335508101301849110496e636f7272656374205369676e65720033017500e50133300233550810130184910f496e636f727265637420537461746500333507d07c303a01548010cc008cd5420404c061240113496e636f7272656374204e657720537461746500333507d07c303a500a48000cc008cd5420404c06124112496e636f727265637420437573746f6d657200333507d056303e500a501433002335508101301849010f496e636f727265637420507269636500333507d07c303d500a303d015330023301849116546f6f204d616e792053637269707420496e7075747300500500115335307c333507b07a500f480304cc059241187072696e7465722046696e697368696e67204661696c6564003335503d3053120012333507c504500107f3502612233002335508101301849114496e636f727265637420546f6b656e20436f6e740033047500c500333002335508101301849110496e636f7272656374205369676e65720033017500e50133300233550810130184910f496e636f727265637420537461746500333507d07c303a01548010cc008cd5420404c061240113496e636f7272656374204e657720537461746500333507d07c303a500b48018cc008cd5420404c06124112496e636f727265637420437573746f6d657200333507d056303e500b501433002335508101301849010f496e636f727265637420507269636500333507d07c303d500b303d01533002335508101301849111496e636f7272656374205072696e74657200333507d056303b500b5013330023355081013018490114496e636f7272656374205072696e742054696d6500333507d07c303c500b303c015330023301849116546f6f204d616e792053637269707420496e7075747300500500115335307c333507b07a500f480384cc0592411c437573746f6d657220436f6e6669726d6174696f6e204661696c6564003335503d3053120012333507c504500107f350261223300233550810130184910f496e636f727265637420537461746500333507d07c303a01548018cc008cd5420404c061240110496e636f7272656374205369676e65720033017500e501433002335508101301849116496e636f727265637420546f6b656e207061796f757400333048500450145003330023355081013018490116496e636f7272656374205072696365207061796f75740033304850045013335508101233506b335506e4890033506b335506e48900001506c506c303d015330023301849010008001330023301849116546f6f204d616e792053637269707420496e7075747300500500113301649115496e636f727265637420416374696f6e20466c61670007e153353506d35301700c2235301b00222222222223303200a00b21335507f0473062001135016353041335738921154e6f20496e70757420746f2056616c69646174652e000424984c8d4c064004888888888802540284cc174c8d4c060004888888888802940252000130075006130065005130055004130045003130035002130025001135300e0032235301200222222222225335350703302900a00b213530660012235306a001222333553055120012235306f0022223530790082235307b005225335308d01333305900400300200113350790090081008507100f1350193530443357389201024c6600045498c8004d541d4894cd4d41780045414c8854cd4d419cc168008854cd4d41a0c8d4c05400488888888894cd4d41ccccd54c1604800540b48d4d541c0004894cd4c21004ccd5cd19b8f00200f08601085011350780031507700221350763535507000122001150745006232323232323213322533535071001210011002505d3333333574800e46666ae68cdc39aab9d5007480008cccd55cfa8039283991999aab9f500725074233335573ea00e4a0ea46666aae7d401c941d88cccd55cfa8039283b91999aab9f35744a0104a66a6a0eea66a6a0eea66a6a0eea66a6a0eea66a6a0ee60926ae85403484d41e8c19c004541e0854cd4d41e0c12cd5d0a806909a83d98010008a83c8a83c10a99a9a83c18259aba1500c213507b3002001150791507821533535078304a35742a016426a0f660040022a0f22a0f042a66a6a0f060946ae85402884d41ecc008004541e4541e0941e012c12812412011c118941c92625071250712507125071044135744a00226ae8940044d5d1280089aba25001135573ca00226ea8004541584c0100044d4c030004880084d4c0a0008880044d4c09c004880084c0a00084c0a800488d4c01c00888888888894cd4d4194ccd54c12848005407c94cd4c1d0ccd5cd19b8f00c001076075135068001150670032107610742253353068001106a13357380040d224c4424660020060044002444444444424666666666600201601401201000e00c00a008006004400224424660020060042400224424660020060042400224424660020060042400224244460060082244400422444002240022466a002a086a08844a6666a600800242a09642a09642a09642666aa605e24002a00846a608000244a66a60b6a66a60b6666ae68cdc79a982b001110011a982b0021100102e82e0999ab9a3370e6a60ac004440026a60ac008440020ba0b820b826a09e0062a09c006266a06244a66a6a090004420062002a08e424444600800a424444600600a424444600400a424444600200a4002424444444600e01044244444446600c012010424444444600a01024444444008244444440064424444444660040120104424444444660020120104002442466002006004400246a604e0024444400446a604c0024444400646a604a0024444400246a60480024444400a46a604600244444008224466aa0046a038a03400224002400246666666ae90004940c4940c4940c48d40c8dd68011281880211999999aba400125030250302503025030235031375c004006240024002244a66a607400420022a66a607400220762078640026aa076444a66a6a04a0042076442a66a6078666a076a012600e004006207c26600a002006640026aa0744444a66a6a04a0062076442a66a60786602c666a076446a605c004446a606000644666601c0080060040026a604a0044440066605a606c008a05e666a076a012600e004006207c266600c00200800646a603e00244400444446466a606200a466a60640084a66a6076666ae68cdc780100081e81e0a801881e101e119a9819002101e1299a981d999ab9a3371e00400207a0782a00620782a66a6a05400642a66a6a0560044266a605e004466a6060004466a6068004466a606a00446602c004002407e466a606a004407e46602c00400244407e44466a6064008407e444a66a6080666ae68cdc38030018210208a99a9820199ab9a3370e00a00408408226607c0080022082208220742a66a6a054002420742074244666aa6018240026a020a01c46a6aa04800244666aa601e240026a026a02246a6aa04e00244666a6aa01a0024660749000000911981d80100091981d000a400000266aa60162400246a6aa0480024466aa04e004666a6aa014002466aa601e2400246a6aa0500024466aa0560046aa02200200244666aaa010024004002466aa601e2400246a6aa0500024466aa0560046aa01e002002666aaa00601a004002222444666aa600c24002a04266aa60162400246a6aa0480024466aa04e0046aa01a002666aa600c24002446a6aa04a00444a66a6072666aa6020240026466a02e44666a6a016006440040040026a6a0120024400266a01244a66a6076004207a200207446a6aa050002446601400400a00c2006266a04a008006a04400266aa60162400246a6aa048002446466aa050006600200a640026aa07844a66a6a04a00226aa01a0064426a6aa05400444a66a607c66018004010266aa02400e0022600c006004244246600200600424002640026aa0664422444a66a6a03e00220044426600a004666aa600e2400200a00800222424446006008224424446600400a00822424446002008224002640026aa05c442244a66a6a0320022a03644266a038600800466aa600c24002008002640026aa05a4422444a66a6a03200226a6a01400644002442666a6a01800a440046008004666aa600e2400200a00800244666ae68cdc7801000816015899a80300081491299a9814001080088148919a80191199a9a803001910010010009a9a80200091000891091980080180109000891091980080180109000899999800a400091100488100483fa21e92000222223333300700500400300200122222123333300100600500400300220013200135502022253353500a0021333501e01d001480088854cd4d404ccd54090018c01c008854cd4c088cc07c0112002133006500f0041330060023370000890010a99a98109980f001a400426600aa01c00626600a00200646a600a00244400246a6004002440024424660020060044002444246660020080060044002224400424424466002008006240022244246600200600422400244246600200600440022424460040062244002240024244600400644424466600200a008006400242446004006424460020064002442466002006004400244666ae68cdc480100080300391199ab9a3370e00400200c00a24002244004244002400222446004002224646002002446600660040040026644004240024003"
                //  }
                ]
        
      }
    ])};

  const inputs = () => {
    return (
      <div>
        <TextField
          autoFocus
          variant="outlined"
          type="text"
          margin="dense"
          required
          id="outputAddress"
          name="outputAddress"
          label="Send to Address"
          value={outputAddress}
          onChange={(event:any) => {setOutputAddress( event.target.value )}}
          style={{ height: "50px", width: "100%" }}
        />
        <TextField
          variant="outlined"
          type="number"
          margin="dense"
          required
          id="outputLoveace"
          name="outputLovelace"
          label="Amount Lovelace to send"
          value={outputLovelace}
          onChange={( event:any ) => { setOutputlovelace( event.target.value ); event.target.value !== "" && updateLovelaceOutput(); }}
          style={{ height: "50px", width: "100%" }}
          disabled={outputAddress.length < 108  && true} // 103 mainnet
          onBlur={ () =>  outputLovelace !== "" && updateLovelaceOutput() }
        />
        <TextField
          variant="outlined"
          type="password"
          margin="dense"
          required
          id="walletPassword"
          name="walletPassword"
          label="Wallet Password"
          value={walletPassword}
          onChange={(event:any) => {setWalletPassword( event.target.value )}}
          style={{ height: "50px", width: "100%" }}
          disabled={outputLovelace < 1000000 && true}
        />
      </div>
    )
  };

  return (
    <>
      <Button color="primary" onClick={handleClickOpen}>
        Open
      </Button>
      <Dialog
        open={open}
        onClose={handleClose}
        aria-labelledby="alert-dialog-title"
        aria-describedby="alert-dialog-description"
        fullWidth
        maxWidth="xl"
      >   
        <DialogTitle id="alert-dialog-title">
          Accounts for wallet: <br />
        </DialogTitle>
        <DialogContent>
          <div className={classes.root}>
            <AppBar position="static" color="default">
              <Tabs
                value={value}
                onChange={handleChange}
                variant="scrollable"
                scrollButtons="on"
                indicatorColor="primary"
                textColor="primary"
                aria-label="scrollable force tabs example"
              >
                <Tab label="Assets" icon={<BathtubIcon />} {...a11yProps(0)} />
                <Tab label="UTXOs" icon={<BathtubIcon />} {...a11yProps(1)} />
                <Tab label="Transaction" icon={<BathtubIcon />} {...a11yProps(2)} disabled= { utxos.length === 0 && outputs.length === 0 ? true : false  } />
                <Tab label="Pools" icon={<BathtubIcon />} {...a11yProps(3)} />
              </Tabs>
            </AppBar>
            <TabPanel value={value} index={0}>
              { parsedUtxos ? <AccountAssetsTable rows={parsedUtxos} utxos={utxos} setUtxos={setUtxos} utxoCheck={utxoCheck} setUtxocheck={setUtxocheck} outputs={outputs} setOutputs={setOutputs} assetCheck={assetCheck} setAssetcheck={setAssetcheck} outputAddress={outputAddress} outputLovelace={outputLovelace} /> : <>LOADING...</>}
              {inputs()}
            </TabPanel>
            <TabPanel value={value} index={1}>
              { parsedUtxos ? <AccountUTXOsTable rows={parsedUtxos} utxos={utxos} setUtxos={setUtxos} utxoCheck={utxoCheck} setUtxocheck={setUtxocheck} outputs={outputs} setOutputs={setOutputs} assetCheck={assetCheck} setAssetcheck={setAssetcheck} /> : <>LOADING...</> }
              {inputs()}
            </TabPanel>
            <TabPanel value={value} index={2}>
              <TxPreview jwToken={jwToken} walletID={walletID} accountName={accountName} address={address} utxos={utxos} setUtxos={setUtxos} utxoCheck={utxoCheck} setUtxocheck={setUtxocheck} outputs={outputs} setOutputs={setOutputs} assetCheck={assetCheck} setAssetcheck={setAssetcheck} walletPassword={walletPassword} outputAddress={outputAddress} outputLovelace={outputLovelace} getAddressInfo={getAddressInfo} />                       
            </TabPanel>
            <TabPanel value={value} index={3}>
              Coming Soon
            </TabPanel>
          </div>
        </DialogContent>
        <DialogActions>
          <div style={{textAlign: "left", }} >
            Before you can send any assets or Lovelaces please specify the delivery address and at least 1,000,000 Lovelaces<br />
            Of course you don't have to send any assets, you can just porivde a delivery address and amount of Lovelaces you would like to send.<br />
            During this testing phase when selectin assets to send the UTXOs containing the assets will be automatically chosen.
          </div>
          <div>
            <Button onClick={handleClose}>Close</Button>
          </div>
        </DialogActions>
      </Dialog>
    </>
  );
}
